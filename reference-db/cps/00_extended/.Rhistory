genes.filename <- sprintf("%s/contigs-cds.fa", this.genus.dir)
summary.filename <- sprintf("%s/summary.txt", this.genus.dir)
full.loci.identified <- file.exists(summary.filename)
if(full.loci.identified){
gene.content <- readLines(summary.filename)
no.assemblies <- length(gene.content)
assembly.names <- sapply(1:no.assemblies, function(k) strsplit(gene.content[k], "\t")[[1]][1])
assembly.gene.s <- sapply(1:no.assemblies, function(k) strsplit(gene.content[k], "\t")[[1]][2])
assembly.genes <- lapply(1:no.assemblies, function(k){
s <- assembly.gene.s[k]
out <- NULL
if(!is.na(s)) out <- strsplit(s, " ")[[1]]
out
})
assembly.names.are.ok <- sapply(assembly.genes, test.genes)
assembly.is.duplidated  <- duplicated(assembly.gene.s)
assembly.passes <- assembly.names.are.ok & !assembly.is.duplidated
no.passed.assemblies <- length(which(assembly.passes))
if(no.passed.assemblies>0){
assembly.names.to.consider <- assembly.names[assembly.passes]
refs <- read.fasta(refs.filename)
refs.n <- names(refs)
genes <- read.fasta(genes.filename)
genes.n <- names(genes)
genes.n.assemblies <- sapply(1:length(genes.n), function(k) strsplit(genes.n[k], "__")[[1]][1])
this.genus.refs <- refs[refs.n %in% assembly.names.to.consider]
this.genus.genes <- genes[genes.n.assemblies %in% assembly.names.to.consider]
names(this.genus.refs) <- sprintf("%s:%s", this.genus.name, names(this.genus.refs))
names(this.genus.genes) <- sprintf("%s:%s", this.genus.name, names(this.genus.genes))
all.refs <- c(all.refs, this.genus.refs)
all.genes <- c(all.genes, this.genus.genes)
}
}
}
cds.n <- names(all.genes)
cds.n
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.ref
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
cds.n.gn
ref.names <- unique(cds.n.ref)
ref.names
N <- length(ref.names)
sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
input.folder.name
summary.output.filename <- sprintf("%s/summary.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
refs.out.filename <- sprintf("%s/references-pre.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
refs.out <- all.refs
genes.out <- all.genes
names(refs.out)
tail(names(refs.out))
head(names(refs.out))
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
cds.n <- names(all.genes)
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output.filename <- sprintf("%s/summary.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
summary.output.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
library(seqinr)
core.genes <- c("galF", "gnd", "ugd")
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database/references.fa")
combined.genes <- read.fasta("../0_combined/database/genes.fa")
seqs.filename <- sprintf("%s/references-pre.fa", input.folder.name)
seq.cds.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
seqs <- read.fasta(seqs.filename)
seq.cds <- read.fasta(seq.cds.filename)
summary.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
summary <- readLines(summary.filename)
summary
no.refs <- length(summary)
ref.names <- sapply(1:no.refs, function(k) strsplit(summary[k], "\t")[[1]][1])
ref.names
ref.names <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][1])
ref.names
gene.names.s <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][2])
gene.names.s
gene.names <- lapply(1:no.refs, function(k) strsplit(gene.names.s[k], "")[[1]])
gene.names
gene.names <- lapply(1:no.refs, function(k) strsplit(gene.names.s[k], " ")[[1]])
gene.names
gene.names
gene.names[[1]]
gene.names[[996]]
k=996
gene.names[[k]]
all.genes <- gene.names[[k]]
gene.names.raw <- lapply(1:no.refs, function(k){
all.genes <- gene.names[[k]]
sapply(1:length(all.genes), function(kk) strsplit(all.genes[kk], "_")[[1]][1])
})
gene.names.raw[[996]]
## QUALITY CRITERIA
# 1. presence of galF as the first gene
crit1 <- sapply(1:no.refs, function(k) gene.names.raw[[k]][1]=="galF")
crit1
gene.names.s[!crit1]
gene.names.s[!crit1]
gene.names.s[crit1]
write(gene.names.s[crit1], "test.txt", ncolumns = 1)
gene.names2 <- gene.names[which(crit1)]
gene.names2
sapply(1:length(gene.names2), function(k) gene.names2[[k]][length(gene.names2[[k]])])
x <- sapply(1:length(gene.names2), function(k) gene.names2[[k]][length(gene.names2[[k]])])
table(gene.names2[[k]])
table(x)
sort(table(x))
# 2. presence of both gnd and ugd OR ends with gnd or ud
gene.names.raw[[k]]
# 2. presence of both gnd and ugd OR ends with gnd or ud
all(c("gnd", "udg") %in% gene.names.raw[[k]])
# 2. presence of both gnd and ugd OR ends with gnd or ud
all(c("gnd", "ugd") %in% gene.names.raw[[k]])
# 2. presence of both gnd and ugd OR ends with gnd or ud
both.gnd.ugd <- all(c("gnd", "ugd") %in% gene.names.raw[[k]])
both.gnd.ugd
## QUALITY CRITERIA
# 1. presence of galF as the first gene
# 2. presence of both gnd and ugd OR ends with gnd or ud
criterion1 <- function(gene.vec) gene.vec[1]=="galF"
## QUALITY CRITERIA
# 1. presence of galF as the first gene
# 2. presence of both gnd and ugd OR ends with gnd or ud
criterion1 <- function(gene.vec) gene.vec[1]=="galF"
criterion2 <- function(gene.vec) all(c("gnd", "ugd") %in% gene.vec)
criterion2
criterion2(gene.names.raw[[k]])
any(c("gnd", "ugd") %in% gene.vec[length(gene.vec)])
criterion3 <- function(gene.vec) any(c("gnd", "ugd") %in% gene.vec[length(gene.vec)])
criterion3(gene.names.raw[[k]])
gene.names.raw[[k]]
sapply(gene.names, criterion1)
gene.names.c1 <- sapply(gene.names, criterion1)
gene.names.c2 <- sapply(gene.names, criterion3)
gene.names.c3 <- sapply(gene.names, criterion2)
gene.names.c2
gene.names.c3
gene.names.c1 <- sapply(gene.names, criterion1)
gene.names.c2 <- sapply(gene.names, criterion2)
gene.names.c3 <- sapply(gene.names, criterion3)
x <- gene.names.s[gene.names.c1 & gene.names.c2 & !gene.names.c3]
write(x, "test.txt", ncolumns = 1)
x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) ]
write(x, "test.txt", ncolumns = 1)
gene.vec
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) ]
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) ]
write(x, "test.txt", ncolumns = 1)
x <- gene.names.s[gene.names.c1 & gene.names.c2 & !gene.names.c3) ]
x <- gene.names.s[gene.names.c1 & gene.names.c2 & !gene.names.c3 ]
write(x, "test.txt", ncolumns = 1)
x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) ]
write(x, "test.txt", ncolumns = 1)
gene.vec.is.core %in% core.genes
gene.vec.is.core <- gene.vec %in% core.genes
gene.vec=gene.names.raw[[1]]
gene.vec.is.core <- gene.vec %in% core.genes
gene.vec.is.core
is.core <- gene.vec %in% core.genes
is.hg <- grepl("^HG", genes.vec)
is.hg <- grepl("^HG", gene.vec)
is.hg
gene.vec
gene.names[[1]]
x <- gene.names.s[gene.names.c1 & !gene.names.c3 ]
write(x, "test.txt", ncolumns = 1)
gene.vec[!is.core & !is.hg]
length(gene.vec[!is.core & !is.hg])
criterion4 <- function(gene.vec){
is.core <- gene.vec %in% core.genes
is.hg <- grepl("^HG", gene.vec)
length(gene.vec[!is.core & !is.hg])>=min.no.transferase.genes
}
gene.vec
is.hg <- grepl("^HG", gene.vec)
is.hg
gene.vec.no.hg <- gene.vec[!is.hg]
gene.vec.no.hg
duplicated(gene.vec.no.hg)
any(duplicated(gene.vec.no.hg)_
length(gene.vec[!is.core & !is.hg])>=min.no.transferase.genes
}
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) ]
write(x, "test.txt", ncolumns = 1)
crit1 <- sapply(1:no.refs, function(k) gene.names.raw[[k]][1]=="galF")
gene.names.raw[[k]]
both.gnd.ugd <- all(c("gnd", "ugd") %in% )
crit2 <- sapply(1:no.refs, function(k) gene.names.raw[[k]][1]=="galF")
gene.names2 <- gene.names[which(crit1)]
x <- sapply(1:length(gene.names2), function(k) gene.names2[[k]][length(gene.names2[[k]])])
any(duplicated(gene.vec.no.hg))
criterion5 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
any(duplicated(gene.vec.no.hg))
}
criterion3 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
any(c("gnd", "ugd") %in% gene.vec.no.hg[length(gene.vec.no.hg)])
}
criterion4 <- function(gene.vec){
is.core <- gene.vec %in% core.genes
is.hg <- grepl("^HG", gene.vec)
length(gene.vec[!is.core & !is.hg])>=min.no.transferase.genes
}
criterion5 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
any(duplicated(gene.vec.no.hg))
}
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
gene.names.c4 <- sapply(gene.names.raw, criterion4)
gene.names.c5 <- sapply(gene.names.raw, criterion5)
min.no.transferase.genes <- 5
gene.names.c4 <- sapply(gene.names.raw, criterion4)
criterion5 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
!any(duplicated(gene.vec.no.hg))
}
gene.names.c5 <- sapply(gene.names.raw, criterion5)
gene.names.c1 & (gene.names.c2 | gene.names.c3) & gene.names.c4 & gene.names.c5
x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) & gene.names.c4 & gene.names.c5]
write(x, "test.txt", ncolumns = 1)
ref.names
ref.passes.all.criteria <- gene.names.c1 & (gene.names.c2 | gene.names.c3) & gene.names.c4 & gene.names.c5
ref.passes.all.criteria
ref.names[ref.passes.all.criteria]
seqs.filename
seqs.n <- names(seqs)
seq.cds.n <- names(seq.cds)
seq.cds.n
seq.cds.n.ref <- sapply(1:length(seq.cds.n), function(k) strsplit(seq.cds.n, "__")[[1]][1])
seq.cds.n.ref <- sapply(1:length(seq.cds.n), function(k) strsplit(seq.cds.n[k], "__")[[1]][1])
seq.cds.n.ref
ref2save <- ref.names[ref.passes.all.criteria]
ref2save
seqs.n %in% ref2save
all.refs <- seqs[which(seqs.n %in% ref2save)]
all.genes <- seq.cds[which(seq.cds.n.ref %in% ref2save)]
all.refs
refs.out.filename <- sprintf("%s/references.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes.fa", input.folder.name)
refs.out.filename
refs.out <- c(combined.refs, all.refs)
genes.out <- c(combined.genes, all.genes)
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
library(seqinr)
source("~/Dropbox/Applications/myRlib/custom-functions.R")
# source("/Users/rmostowy/Dropbox/Projects/CpsEvolution/CapsuleEntero/analysis-tools/fast-kaptive/latest-version/R.output/functions.R")
temp.folder.name <- sprintf("/tmp/%s", get.random.dir.name(12))
make.dir(temp.folder.name)
cds.fa <- read.fasta("database/genes.fa")
cds.aa <- lapply(1:length(cds.fa), function(k) translate(cds.fa[[k]]))
write.fasta(cds.aa, names=names(cds.fa), sprintf("%s/genes.aa", temp.folder.name))
mmseq.cmd.createdb <- sprintf("mmseqs createdb %s/genes.aa %s/DB", temp.folder.name, temp.folder.name)
mmseq.cmd.cluster <- sprintf("mmseqs cluster %s/DB %s/DB_clu %s/tmp.mmseq --min-seq-id 0.5", temp.folder.name, temp.folder.name, temp.folder.name)
mmseq.cmd.create.tsv <- sprintf("mmseqs createtsv %s/DB %s/DB %s/DB_clu %s/DB_clu.tsv", temp.folder.name, temp.folder.name, temp.folder.name, temp.folder.name)
system(mmseq.cmd.createdb)
system(mmseq.cmd.cluster)
system(mmseq.cmd.create.tsv)
mmseqs.output <- read.table(sprintf("%s/DB_clu.tsv", temp.folder.name), stringsAsFactors = F)
cluster.reprentatives <- unique(mmseqs.output$V1)
no.clusters <- length(cluster.reprentatives)
clusters <- lapply(1:no.clusters, function(cluster.reprentative.index){
this.cluster.reprentative <- cluster.reprentatives[cluster.reprentative.index]
mmseqs.output$V2[which(mmseqs.output$V1 %in% this.cluster.reprentative)]
})
HG <- sapply(1:no.clusters, function(hg.index){
these.members <- clusters[[hg.index]]
no.these.members <- length(these.members)
this.hg.name <- sprintf("HG%.4d", hg.index)
HG <- rep(this.hg.name, no.these.members)
})
members <- sapply(1:no.clusters, function(hg.index) clusters[[hg.index]] )
HG <- unlist(HG)
members <- unlist(members)
clusters.table <- data.frame(HG, members)
write.table(clusters.table, "homology-groups-table.txt", row.names = F, quote=F)
cds.n <- names(cds.fa)
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.ref
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output
input.folder.name
summary.output.filename <- sprintf("database/summary.txt")
summary.output.filename
write(summary.output, summary.output.filename, ncolumns = 1)
library(seqinr)
core.genes <- c("galF", "gnd", "ugd")
min.no.transferase.genes <- 5
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database/references.fa")
combined.genes <- read.fasta("../0_combined/database/genes.fa")
seqs.filename <- sprintf("%s/references-pre.fa", input.folder.name)
seq.cds.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
summary.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
seqs <- read.fasta(seqs.filename)
seqs.n <- names(seqs)
seq.cds <- read.fasta(seq.cds.filename)
seq.cds.n <- names(seq.cds)
seq.cds.n.ref <- sapply(1:length(seq.cds.n), function(k) strsplit(seq.cds.n[k], "__")[[1]][1])
summary <- readLines(summary.filename)
no.refs <- length(summary)
ref.names <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][1])
gene.names.s <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][2])
gene.names <- lapply(1:no.refs, function(k) strsplit(gene.names.s[k], " ")[[1]])
gene.names.raw <- lapply(1:no.refs, function(k){
all.genes <- gene.names[[k]]
sapply(1:length(all.genes), function(kk) strsplit(all.genes[kk], "_")[[1]][1])
})
library(seqinr)
core.genes <- c("galF", "gnd", "ugd")
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database/references.fa")
combined.genes <- read.fasta("../0_combined/database/genes.fa")
locus.dir <- "/Users/rmostowy/Dropbox/Projects/CpsEvolution/CapsuleEntero/data/2_getGenera"
test.genes <- function(genes.vec){
test.result <- FALSE
if(!is.null(genes.vec)){
if(all(!is.na(genes.vec))){
# minimum two genes which are not HG nor core
genes.vec.raw <- sapply(1:length(genes.vec), function(k) strsplit(genes.vec[k], "_")[[1]][1])
is.core <- genes.vec.raw %in% core.genes
is.hg <- grepl("^HG", genes.vec)
no.all.genes <- length(genes.vec)
no.unique.gens <- length(which(!is.core & !is.hg))
test.result <- no.unique.gens>=2
}
}
return(test.result)
}
no.genera <- length(Sys.glob(sprintf("%s/genus*", locus.dir)))
all.refs <- NULL
all.genes <- NULL
for(genus.index in 1:no.genera){
# for(genus.index in 1:11){
this.genus.dir <- Sys.glob(sprintf("%s/genus%.2d_*/new-1_getCpsData/round1/intact.loci", locus.dir, genus.index))
this.genus.name <- strsplit(this.genus.dir, "/genus")[[1]][2]
this.genus.name <- strsplit(this.genus.name, "/")[[1]][1]
this.genus.name <- strsplit(this.genus.name, "_")[[1]][2]
refs.filename <- sprintf("%s/all.contigs.fa", this.genus.dir)
genes.filename <- sprintf("%s/contigs-cds.fa", this.genus.dir)
summary.filename <- sprintf("%s/summary.txt", this.genus.dir)
full.loci.identified <- file.exists(summary.filename)
if(full.loci.identified){
gene.content <- readLines(summary.filename)
no.assemblies <- length(gene.content)
assembly.names <- sapply(1:no.assemblies, function(k) strsplit(gene.content[k], "\t")[[1]][1])
assembly.gene.s <- sapply(1:no.assemblies, function(k) strsplit(gene.content[k], "\t")[[1]][2])
assembly.genes <- lapply(1:no.assemblies, function(k){
s <- assembly.gene.s[k]
out <- NULL
if(!is.na(s)) out <- strsplit(s, " ")[[1]]
out
})
assembly.names.are.ok <- sapply(assembly.genes, test.genes)
assembly.is.duplidated  <- duplicated(assembly.gene.s)
assembly.passes <- assembly.names.are.ok & !assembly.is.duplidated
no.passed.assemblies <- length(which(assembly.passes))
if(no.passed.assemblies>0){
assembly.names.to.consider <- assembly.names[assembly.passes]
refs <- read.fasta(refs.filename)
refs.n <- names(refs)
genes <- read.fasta(genes.filename)
genes.n <- names(genes)
genes.n.assemblies <- sapply(1:length(genes.n), function(k) strsplit(genes.n[k], "__")[[1]][1])
this.genus.refs <- refs[refs.n %in% assembly.names.to.consider]
this.genus.genes <- genes[genes.n.assemblies %in% assembly.names.to.consider]
names(this.genus.refs) <- sprintf("%s:%s", this.genus.name, names(this.genus.refs))
names(this.genus.genes) <- sprintf("%s:%s", this.genus.name, names(this.genus.genes))
all.refs <- c(all.refs, this.genus.refs)
all.genes <- c(all.genes, this.genus.genes)
}
}
}
refs.out.filename <- sprintf("%s/references-pre.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
refs.out <- all.refs
genes.out <- all.genes
refs.out
k=1
refs.out[[k]]=="n"
sapply(1:length(refs.out), function(k) which(refs.out[[k]]=="n"))
length(refs.out)
refs.out[[1]]
refs.out[[1]][1]
sapply(1:length(refs.out), function(k) length(which(refs.out[[k]]=="n")))
refs.out.missing.sites <- sapply(1:length(refs.out), function(k) length(which(refs.out[[k]]=="n")))
refs.out.missing.sites
max.number.missing.sites <- 100
length(which(refs.out.missing.sites<=100))/length(refs.out.missing.sites)
length(which(refs.out.missing.sites<=100))
length(which(refs.out.missing.sites>100))
refs.out.number.missing.sites <- sapply(1:length(refs.out), function(k) length(which(refs.out[[k]]=="n")))
refs.out.number.missing.sites<=max.number.missing.sites
refs.out.number.missing.sites[which(refs.out.number.missing.sites<=max.number.missing.sites)]
genes.out
names(refs.out)[which(refs.out.number.missing.sites<=max.number.missing.sites)]
refs.are.ok <- names(refs.out)[which(refs.out.number.missing.sites<=max.number.missing.sites)]
refs.out.n <- names(refs.out)
refs.are.ok <- refs.out.n[which(refs.out.number.missing.sites<=max.number.missing.sites)]
genes.out.n <- names(genes.out)
genes.out.n
genes.out.n.ref <- sapply(1:length(genes.out.n), function(k) strsplit(genes.out.n[k],"__")[[1]][1])
genes.out.n.ref
refs.are.ok
refs.out.n %in% refs.are.ok
refs.out[which(refs.out.n %in% refs.are.ok)]
refs.out.number.missing.sites <- sapply(1:length(refs.out), function(k) length(which(refs.out[[k]]=="n")))
refs.are.ok <- refs.out.n[which(refs.out.number.missing.sites<=max.number.missing.sites)]
refs.out <- refs.out[which(refs.out.n %in% refs.are.ok)]
genes.out <- genes.out[which(genes.out.n.ref %in% refs.are.ok)]
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
cds.n <- names(all.genes)
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
cds.n <- refs.out.n
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
refs.out.n
cds.n <- genes.out.n
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
cds.n
cds.n <- names(genes.out)
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
