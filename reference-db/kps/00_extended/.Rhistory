gene.names.s[!(gene.names.c1 & gene.names.c2 & gene.names.c3)]
gene.names.s[(gene.names.c1 & gene.names.c2 & gene.names.c3)]
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
# x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) & gene.names.c4 & gene.names.c5]
# write(x, "test.txt", ncolumns = 1)
ref.passes.all.criteria <- gene.names.c1 & gene.names.c2 & gene.names.c3
ref2save <- ref.names[ref.passes.all.criteria]
all.refs <- seqs[which(seqs.n %in% ref2save)]
all.genes <- seq.cds[which(seq.cds.n.ref %in% ref2save)]
refs.out.filename <- sprintf("%s/references.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes.fa", input.folder.name)
refs.out <- c(combined.refs, all.refs)
genes.out <- c(combined.genes, all.genes)
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
library(seqinr)
# core.genes <- c("galF", "gnd", "ugd")
min.no.transferase.genes <- 3
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database/references.fa")
combined.genes <- read.fasta("../0_combined/database/genes.fa")
combined.refs
names(combined.refs)
library(seqinr)
# core.genes <- c("galF", "gnd", "ugd")
min.no.transferase.genes <- 3
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database/references.fa")
combined.genes <- read.fasta("../0_combined/database/genes.fa")
seqs.filename <- sprintf("%s/references-pre.fa", input.folder.name)
seq.cds.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
summary.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
seqs <- read.fasta(seqs.filename)
seq.cds <- read.fasta(seq.cds.filename)
grep("KX", names(combined.refs))
names(combined.genes)
grep("KX", names(combined.genes))
combined.refs.kx <- combined.refs[grep("KX", names(combined.refs))]
combined.genes.kx <- combined.genes[grep("KX", names(combined.genes))]
combined.refs.kx
combined.genes.kx
source('~/Dropbox (Infectious Disease)/Projects/CpsEvolution/CapsuleEntero/reference-db/kps/00_extended/1_getNewLoci.R', echo=TRUE)
library(seqinr)
# core.genes <- c("galF", "gnd", "ugd")
min.no.transferase.genes <- 3
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database-new/references.fa")
combined.genes <- read.fasta("../0_combined/database-new/genes.fa")
seqs.filename <- sprintf("%s/references-pre.fa", input.folder.name)
seq.cds.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
summary.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
seqs <- read.fasta(seqs.filename)
seq.cds <- read.fasta(seq.cds.filename)
combined.refs.kx <- combined.refs[grep("KX", names(combined.refs))]
combined.genes.kx <- combined.genes[grep("KX", names(combined.genes))]
combined.refs.kx
names(combined.refs.kx)
names(seqs)
names(combined.refs)
!grepl("KX", names(combined.genes))
!grepl("KX", names(combined.refs))
library(seqinr)
# core.genes <- c("galF", "gnd", "ugd")
min.no.transferase.genes <- 3
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database-new/references.fa")
combined.genes <- read.fasta("../0_combined/database-new/genes.fa")
seqs.filename <- sprintf("%s/references-pre.fa", input.folder.name)
seq.cds.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
summary.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
seqs <- read.fasta(seqs.filename)
seq.cds <- read.fasta(seq.cds.filename)
combined.refs.kx <- combined.refs[grep("KX", names(combined.refs))]
combined.genes.kx <- combined.genes[grep("KX", names(combined.genes))]
combined.refs <- combined.refs[!grepl("KX", names(combined.refs))]
combined.genes <- combined.genes[!grepl("KX", names(combined.genes))]
seqs <- c(combined.refs.kx, seqs)
seq.cds <- c(combined.genes.kx, seq.cds)
seqs.n <- names(seqs)
seq.cds.n <- names(seq.cds)
seq.cds.n.ref <- sapply(1:length(seq.cds.n), function(k) strsplit(seq.cds.n[k], "__")[[1]][1])
summary <- readLines(summary.filename)
no.refs <- length(summary)
ref.names <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][1])
gene.names.s <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][2])
gene.names <- lapply(1:no.refs, function(k) strsplit(gene.names.s[k], " ")[[1]])
gene.names.raw <- lapply(1:no.refs, function(k){
all.genes <- gene.names[[k]]
sapply(1:length(all.genes), function(kk) strsplit(all.genes[kk], "_")[[1]][1])
})
## QUALITY CRITERIA
# 1. starts with kps
# 2. ends with kps (except for HG)
# 3. at least three non-core/non-HG genes
# 4. no duplicates
criterion1 <- function(gene.vec) grepl("^kps", gene.vec[1])
criterion2 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
grepl("^kps", gene.vec.no.hg[length(gene.vec.no.hg)])
}
criterion3 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
!any(duplicated(gene.vec.no.hg))
}
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
# x <- gene.names.s[gene.names.c1 & (gene.names.c2 | gene.names.c3) & gene.names.c4 & gene.names.c5]
# write(x, "test.txt", ncolumns = 1)
ref.passes.all.criteria <- gene.names.c1 & gene.names.c2 & gene.names.c3
ref2save <- ref.names[ref.passes.all.criteria]
all.refs <- seqs[which(seqs.n %in% ref2save)]
all.genes <- seq.cds[which(seq.cds.n.ref %in% ref2save)]
refs.out.filename <- sprintf("%s/references.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes.fa", input.folder.name)
refs.out <- c(combined.refs, all.refs)
genes.out <- c(combined.genes, all.genes)
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
names(all.refs)
names(seqs)
seqs.n <- names(seqs)
seqs.n
seq.cds.n <- names(seq.cds)
seq.cds.n
tail(seq.cds.n)
seq.cds.n.ref <- sapply(1:length(seq.cds.n), function(k) strsplit(seq.cds.n[k], "__")[[1]][1])
seq.cds.n.ref
summary <- readLines(summary.filename)
summary
no.refs <- length(summary)
ref.names <- sapply(1:no.refs, function(k) strsplit(summary[k], ":\t")[[1]][1])
ref.names
summary
library(seqinr)
# core.genes <- c("galF", "gnd", "ugd")
min.no.transferase.genes <- 3
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database-new/references.fa")
combined.genes <- read.fasta("../0_combined/database-new/genes.fa")
seqs.filename <- sprintf("%s/references-pre.fa", input.folder.name)
seq.cds.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
summary.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
seqs <- read.fasta(seqs.filename)
seq.cds <- read.fasta(seq.cds.filename)
combined.refs.kx <- combined.refs[grep("KX", names(combined.refs))]
combined.genes.kx <- combined.genes[grep("KX", names(combined.genes))]
combined.refs <- combined.refs[!grepl("KX", names(combined.refs))]
combined.genes <- combined.genes[!grepl("KX", names(combined.genes))]
seqs <- c(combined.refs.kx, seqs)
seq.cds <- c(combined.genes.kx, seq.cds)
seqs.n <- names(seqs)
seq.cds.n <- names(seq.cds)
seq.cds.n.ref <- sapply(1:length(seq.cds.n), function(k) strsplit(seq.cds.n[k], "__")[[1]][1])
unique(seq.cds.n.ref)
no.refs <- length(unique(seq.cds.n.ref))
no.refs
ref.names <- unique(seq.cds.n.ref)
ref.names
no.refs <- length(ref.names)
seq.cds.n[which(seq.cds.n.ref == ref.names[k])]
k=1
seq.cds.n[which(seq.cds.n.ref == ref.names[k])]
cds.names <- seq.cds.n[which(seq.cds.n.ref == ref.names[k])]
sapply(1:length(cds.names), function(kk) strsplit(cds.names[kk], "__")[[1]][2])
gene.names <- sapply(1:no.refs, function(k){
cds.names <- seq.cds.n[which(seq.cds.n.ref == ref.names[k])]
sapply(1:length(cds.names), function(kk) strsplit(cds.names[kk], "__")[[1]][2])
})
gene.names.s <- sapply(1:no.refs, function(k) paste(gene.names[[k]], collapse=" "))
gene.names.s
gene.names.raw <- lapply(1:no.refs, function(k){
all.genes <- gene.names[[k]]
sapply(1:length(all.genes), function(kk) strsplit(all.genes[kk], "_")[[1]][1])
})
gene.names.raw
## QUALITY CRITERIA
# 1. starts with kps
# 2. ends with kps (except for HG)
# 3. at least three non-core/non-HG genes
# 4. no duplicates
criterion1 <- function(gene.vec) grepl("^kps", gene.vec[1])
criterion2 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
grepl("^kps", gene.vec.no.hg[length(gene.vec.no.hg)])
}
criterion3 <- function(gene.vec){
is.hg <- grepl("^HG", gene.vec)
gene.vec.no.hg <- gene.vec[!is.hg]
!any(duplicated(gene.vec.no.hg))
}
gene.names.c1 <- sapply(gene.names.raw, criterion1)
gene.names.c2 <- sapply(gene.names.raw, criterion2)
gene.names.c3 <- sapply(gene.names.raw, criterion3)
ref.passes.all.criteria <- gene.names.c1 & gene.names.c2 & gene.names.c3
ref.passes.all.criteria
ref2save <- ref.names[ref.passes.all.criteria]
ref2save
all.refs <- seqs[which(seqs.n %in% ref2save)]
all.genes <- seq.cds[which(seq.cds.n.ref %in% ref2save)]
refs.out.filename <- sprintf("%s/references.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes.fa", input.folder.name)
refs.out <- c(combined.refs, all.refs)
genes.out <- c(combined.genes, all.genes)
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
library(seqinr)
library(igraph)
source("~/Dropbox/Applications/myRlib/custom-functions.R")
output.folder <- "database"
make.dir(output.folder)
seq <- read.fasta("input-data/references.fa")
seq.n <- names(seq)
cds.seq <- read.fasta("input-data/genes.fa")
cds.seq.n <- names(cds.seq)
cds.seq.n.ref <- sapply(1:length(cds.seq.n), function(k) strsplit(cds.seq.n[k],"__")[[1]][1])
reference.names <- unique(cds.seq.n.ref)
N <- length(reference.names)
reference.names.orig <- reference.names[!grepl(":", reference.names)]
reference.names.extended <- reference.names[grepl(":", reference.names)]
homology.groups <- read.table("homology-groups-table.txt", header = T, stringsAsFactors = F)
homology.groups.gn <- sapply(1:nrow(homology.groups), function(k) strsplit(homology.groups$members[k],"__")[[1]][2])
hg2exclude <- NULL #unique(homology.groups$HG[which(homology.groups.gn %in% c("galF", "gnd", "ugd", "hisI"))])
hg.can.stay <- !homology.groups$HG %in% hg2exclude
homology.groups <- homology.groups[hg.can.stay,]
homology.groups.refs <- sapply(1:nrow(homology.groups), function(k) strsplit(homology.groups$members[k], "__")[[1]][1])
reference.names.hg <- lapply(1:N, function(ref.index){
this.ref <- reference.names[ref.index]
homology.groups$HG[which(homology.groups.refs == this.ref)]
})
pairwise.table <- expand.grid(1:N, 1:N)
pairwise.table <- pairwise.table[pairwise.table[,1]<=pairwise.table[,2],]
distances <- sapply(1:nrow(pairwise.table), function(pair.index){
index.a <- pairwise.table[pair.index,1]
index.b <- pairwise.table[pair.index,2]
content.a <- reference.names.hg[[index.a]]
content.b <- reference.names.hg[[index.b]]
pair.intersect <- intersect(content.a, content.b)
pair.union <- union(content.a, content.b)
1-length(pair.intersect)/length(pair.union)
})
distance.table <- data.frame(from=reference.names[pairwise.table[,1]],
to=reference.names[pairwise.table[,2]],
jaccard.dist =round(distances, d=3), stringsAsFactors = F)
distance.table <- distance.table[which(distance.table$jaccard.dist==0),]
g <- graph_from_data_frame(distance.table, directed = FALSE)
g.clustering <- clusters(g)
no.clusters <- g.clustering$no
cluster.members <- lapply(1:no.clusters, function(k) names(which(g.clustering$membership==k)))
clusters.contain.orig.ref <- sapply(1:length(cluster.members), function(k) any(cluster.members[[k]] %in% reference.names.orig))
no.clusters.contain.orig.ref <- length(which(clusters.contain.orig.ref))
clusters.do.not.contain.orig.ref <- sapply(1:length(cluster.members), function(k) !any(cluster.members[[k]] %in% reference.names.orig))
no.clusters.new <- length(which(clusters.do.not.contain.orig.ref))
no.clusters.new
representatives.old <- sapply(1:no.clusters.new, function(new.cluster.index){
new.cluster.members.index <- which(clusters.do.not.contain.orig.ref)[new.cluster.index]
new.cluster.members <- cluster.members[[new.cluster.members.index]]
no.cluster.members <- length(new.cluster.members)
new.cluster.members[1]
})
representatives.old
seq.n
cluster.members
clusters.do.not.contain.orig.ref
clusters.contain.orig.ref
reference.names.orig
reference.names.orig
reference.names
grepl(":", reference.names)
grepl(":", reference.names) | grepl("-KX", reference.names)
!(grepl(":", reference.names) | grepl("-KX", reference.names))
reference.names.orig <- reference.names[!(grepl(":", reference.names) | grepl("-KX", reference.names))]
reference.names.extended <- reference.names[grepl(":", reference.names) | grepl("-KX", reference.names)]
reference.names.orig
reference.names.extended
homology.groups <- read.table("homology-groups-table.txt", header = T, stringsAsFactors = F)
homology.groups.gn <- sapply(1:nrow(homology.groups), function(k) strsplit(homology.groups$members[k],"__")[[1]][2])
hg2exclude <- NULL #unique(homology.groups$HG[which(homology.groups.gn %in% c("galF", "gnd", "ugd", "hisI"))])
hg.can.stay <- !homology.groups$HG %in% hg2exclude
homology.groups <- homology.groups[hg.can.stay,]
homology.groups.refs <- sapply(1:nrow(homology.groups), function(k) strsplit(homology.groups$members[k], "__")[[1]][1])
reference.names.hg <- lapply(1:N, function(ref.index){
this.ref <- reference.names[ref.index]
homology.groups$HG[which(homology.groups.refs == this.ref)]
})
pairwise.table <- expand.grid(1:N, 1:N)
pairwise.table <- pairwise.table[pairwise.table[,1]<=pairwise.table[,2],]
distances <- sapply(1:nrow(pairwise.table), function(pair.index){
index.a <- pairwise.table[pair.index,1]
index.b <- pairwise.table[pair.index,2]
content.a <- reference.names.hg[[index.a]]
content.b <- reference.names.hg[[index.b]]
pair.intersect <- intersect(content.a, content.b)
pair.union <- union(content.a, content.b)
1-length(pair.intersect)/length(pair.union)
})
distance.table <- data.frame(from=reference.names[pairwise.table[,1]],
to=reference.names[pairwise.table[,2]],
jaccard.dist =round(distances, d=3), stringsAsFactors = F)
distance.table <- distance.table[which(distance.table$jaccard.dist==0),]
g <- graph_from_data_frame(distance.table, directed = FALSE)
g.clustering <- clusters(g)
no.clusters <- g.clustering$no
cluster.members <- lapply(1:no.clusters, function(k) names(which(g.clustering$membership==k)))
clusters.contain.orig.ref <- sapply(1:length(cluster.members), function(k) any(cluster.members[[k]] %in% reference.names.orig))
no.clusters.contain.orig.ref <- length(which(clusters.contain.orig.ref))
clusters.do.not.contain.orig.ref <- sapply(1:length(cluster.members), function(k) !any(cluster.members[[k]] %in% reference.names.orig))
no.clusters.new <- length(which(clusters.do.not.contain.orig.ref))
no.clusters.new
representatives.old <- sapply(1:no.clusters.new, function(new.cluster.index){
new.cluster.members.index <- which(clusters.do.not.contain.orig.ref)[new.cluster.index]
new.cluster.members <- cluster.members[[new.cluster.members.index]]
no.cluster.members <- length(new.cluster.members)
new.cluster.members[1]
})
representatives.old
k=1
grepl(":", representatives.old[k])
grepl("-", representatives.old[k])
representatives.new <- sapply(1:no.clusters.new, function(k){
is.type1 <- grepl(":", representatives.old[k])
is.type2 <- grepl("-", representatives.old[k])
if(is.type1) genus <- strsplit(representatives.old[k], ":")[[1]][1]
if(is.type2) genus <- strsplit(representatives.old[k], "-")[[1]][1]
sprintf("%s-NL%d", genus, k)
})
representatives.new
seq.repr <- seq[which(seq.n %in% c(reference.names.orig, representatives.old))]
seq.repr.n <- names(seq.repr)
cds.seq.repr <- cds.seq[which(cds.seq.n.ref %in% c(reference.names.orig, representatives.old))]
cds.seq.repr.n <- names(cds.seq.repr)
# x <- unique(sapply(1:length(cds.seq.repr), function(k) strsplit(names(cds.seq.repr)[k],"__")[[1]][1]))
seq.repr.n.new <- sapply(1:length(seq.repr.n), function(k){
out <- seq.repr.n[k]
seq.to.rename <- out %in% representatives.old
if(seq.to.rename) out <- representatives.new[which(representatives.old == out)]
out
})
cds.seq.repr.n.new <- sapply(1:length(cds.seq.repr.n), function(k){
out <- cds.seq.repr.n[k]
out.ref <- strsplit(out,"__")[[1]][1]
out.gn <- strsplit(out,"__")[[1]][2]
seq.to.rename <- out.ref %in% representatives.old
if(seq.to.rename) out.ref <- representatives.new[which(representatives.old == out.ref)]
sprintf("%s__%s", out.ref, out.gn)
})
seq.out.filename <- sprintf("%s/references.fa", output.folder)
cds.seq.out.filename <- sprintf("%s/genes.fa", output.folder)
write.fasta(seq.repr, names=seq.repr.n.new, seq.out.filename)
write.fasta(cds.seq.repr, names=cds.seq.repr.n.new, cds.seq.out.filename)
library(seqinr)
source("~/Dropbox/Applications/myRlib/custom-functions.R")
# source("/Users/rmostowy/Dropbox/Projects/CpsEvolution/CapsuleEntero/analysis-tools/fast-kaptive/latest-version/R.output/functions.R")
temp.folder.name <- sprintf("/tmp/%s", get.random.dir.name(12))
make.dir(temp.folder.name)
cds.fa <- read.fasta("database/genes.fa")
cds.aa <- lapply(1:length(cds.fa), function(k) translate(cds.fa[[k]]))
write.fasta(cds.aa, names=names(cds.fa), sprintf("%s/genes.aa", temp.folder.name))
mmseq.cmd.createdb <- sprintf("mmseqs createdb %s/genes.aa %s/DB", temp.folder.name, temp.folder.name)
mmseq.cmd.cluster <- sprintf("mmseqs cluster %s/DB %s/DB_clu %s/tmp.mmseq --min-seq-id 0.5", temp.folder.name, temp.folder.name, temp.folder.name)
mmseq.cmd.create.tsv <- sprintf("mmseqs createtsv %s/DB %s/DB %s/DB_clu %s/DB_clu.tsv", temp.folder.name, temp.folder.name, temp.folder.name, temp.folder.name)
system(mmseq.cmd.createdb)
system(mmseq.cmd.cluster)
system(mmseq.cmd.create.tsv)
mmseqs.output <- read.table(sprintf("%s/DB_clu.tsv", temp.folder.name), stringsAsFactors = F)
cluster.reprentatives <- unique(mmseqs.output$V1)
no.clusters <- length(cluster.reprentatives)
clusters <- lapply(1:no.clusters, function(cluster.reprentative.index){
this.cluster.reprentative <- cluster.reprentatives[cluster.reprentative.index]
mmseqs.output$V2[which(mmseqs.output$V1 %in% this.cluster.reprentative)]
})
HG <- sapply(1:no.clusters, function(hg.index){
these.members <- clusters[[hg.index]]
no.these.members <- length(these.members)
this.hg.name <- sprintf("HG%.4d", hg.index)
HG <- rep(this.hg.name, no.these.members)
})
members <- sapply(1:no.clusters, function(hg.index) clusters[[hg.index]] )
HG <- unlist(HG)
members <- unlist(members)
clusters.table <- data.frame(HG, members)
write.table(clusters.table, "homology-groups-table.txt", row.names = F, quote=F)
cds.n <- names(cds.fa)
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
ref.names
N <- length(ref.names)
N
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output
summary.output.filename <- sprintf("database/summary.txt")
write(summary.output, summary.output.filename, ncolumns = 1)
delete.file(temp.folder.name)
source('~/Projects/CpsEvolution/CapsuleEntero/reference-db/kps/00_extended/1_getNewLoci.R', echo=TRUE)
library(seqinr)
# core.genes <- c("galF", "gnd", "ugd")
source("~/Dropbox/Applications/myRlib/custom-functions.R")
input.folder.name <- "input-data"
make.dir(input.folder.name)
combined.refs <- read.fasta("../0_combined/database-new/references.fa")
combined.genes <- read.fasta("../0_combined/database-new/genes.fa")
locus.dir <- "/Users/rmostowy/Dropbox/Projects/CpsEvolution/CapsuleEntero/data/2_getGenera"
test.genes <- function(genes.vec){
test.result <- FALSE
if(!is.null(genes.vec)){
if(all(!is.na(genes.vec))){
# minimum two genes which are not HG nor core
genes.vec.raw <- sapply(1:length(genes.vec), function(k) strsplit(genes.vec[k], "_")[[1]][1])
is.core <-grepl("^kps", genes.vec)
is.hg <- grepl("^HG", genes.vec)
no.all.genes <- length(genes.vec)
no.unique.gens <- length(which(!is.core & !is.hg))
test.result <- no.unique.gens>=2
}
}
return(test.result)
}
no.genera <- length(Sys.glob(sprintf("%s/genus*", locus.dir)))
all.refs <- NULL
all.genes <- NULL
for(genus.index in 1:no.genera){
# for(genus.index in 1:11){
this.genus.dir <- Sys.glob(sprintf("%s/genus%.2d_*/new-2_getKpsData/round1/intact.loci", locus.dir, genus.index))
this.genus.name <- strsplit(this.genus.dir, "/genus")[[1]][2]
this.genus.name <- strsplit(this.genus.name, "/")[[1]][1]
this.genus.name <- strsplit(this.genus.name, "_")[[1]][2]
refs.filename <- sprintf("%s/all.contigs.fa", this.genus.dir)
genes.filename <- sprintf("%s/contigs-cds.fa", this.genus.dir)
summary.filename <- sprintf("%s/summary.txt", this.genus.dir)
full.loci.identified <- file.exists(summary.filename)
if(full.loci.identified){
gene.content <- readLines(summary.filename)
no.assemblies <- length(gene.content)
assembly.names <- sapply(1:no.assemblies, function(k) strsplit(gene.content[k], "\t")[[1]][1])
assembly.gene.s <- sapply(1:no.assemblies, function(k) strsplit(gene.content[k], "\t")[[1]][2])
assembly.genes <- lapply(1:no.assemblies, function(k){
s <- assembly.gene.s[k]
out <- NULL
if(!is.na(s)) out <- strsplit(s, " ")[[1]]
out
})
assembly.names.are.ok <- sapply(assembly.genes, test.genes)
assembly.is.duplidated  <- duplicated(assembly.gene.s)
assembly.passes <- assembly.names.are.ok & !assembly.is.duplidated
no.passed.assemblies <- length(which(assembly.passes))
if(no.passed.assemblies>0){
assembly.names.to.consider <- assembly.names[assembly.passes]
refs <- read.fasta(refs.filename)
refs.n <- names(refs)
genes <- read.fasta(genes.filename)
genes.n <- names(genes)
genes.n.assemblies <- sapply(1:length(genes.n), function(k) strsplit(genes.n[k], "__")[[1]][1])
this.genus.refs <- refs[refs.n %in% assembly.names.to.consider]
this.genus.genes <- genes[genes.n.assemblies %in% assembly.names.to.consider]
names(this.genus.refs) <- sprintf("%s:%s", this.genus.name, names(this.genus.refs))
names(this.genus.genes) <- sprintf("%s:%s", this.genus.name, names(this.genus.genes))
all.refs <- c(all.refs, this.genus.refs)
all.genes <- c(all.genes, this.genus.genes)
}
}
}
refs.out.filename <- sprintf("%s/references-pre.fa", input.folder.name)
genes.out.filename <- sprintf("%s/genes-pre.fa", input.folder.name)
refs.out <- all.refs
refs.out.n <- names(refs.out)
genes.out <- all.genes
genes.out.n <- names(genes.out)
genes.out.n.ref <- sapply(1:length(genes.out.n), function(k) strsplit(genes.out.n[k],"__")[[1]][1])
refs.out.number.missing.sites <- sapply(1:length(refs.out), function(k) length(which(refs.out[[k]]=="n")))
refs.out.number.missing.sites
refs.are.ok <- refs.out.n[which(refs.out.number.missing.sites<=max.number.missing.sites)]
max.number.missing.sites <- 100
refs.out.number.missing.sites <- sapply(1:length(refs.out), function(k) length(which(refs.out[[k]]=="n")))
refs.are.ok <- refs.out.n[which(refs.out.number.missing.sites<=max.number.missing.sites)]
refs.are.ok
refs.out <- refs.out[which(refs.out.n %in% refs.are.ok)]
genes.out <- genes.out[which(genes.out.n.ref %in% refs.are.ok)]
write.fasta(refs.out, names=names(refs.out), refs.out.filename)
write.fasta(genes.out, names=names(genes.out), genes.out.filename)
cds.n <- names(genes.out)
cds.n.ref <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][1])
cds.n.gn <- sapply(1:length(cds.n), function(k) strsplit(cds.n[k], "__")[[1]][2])
ref.names <- unique(cds.n.ref)
N <- length(ref.names)
summary.output <- sapply(1:length(ref.names), function(ref.index){
this.ref.name <- ref.names[ref.index]
gene.string <- paste(cds.n.gn[which(cds.n.ref == this.ref.name)],collapse=" ")
sprintf("%s:\t%s", this.ref.name, gene.string)
})
summary.output.filename <- sprintf("%s/summary-pre.txt", input.folder.name)
write(summary.output, summary.output.filename, ncolumns = 1)
length(refs.out)
