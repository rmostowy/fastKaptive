##################################################
############ Written by Rafal Mostowy ############
################# Version: 0.2.2 #################
######## Date: Tue Jun 26 16:23:10 2018 ##########
##################################################
##################################################
suppressWarnings(suppressPackageStartupMessages(library(seqinr)))
suppressWarnings(suppressPackageStartupMessages(library(igraph)))
suppressWarnings(suppressPackageStartupMessages(library(optparse)))
cds.coverage.threshold <- 95
klocus.overlap.threshold <- 0.5
cds.overlap.threshold <- 0.7
locus.length.comparison.margin <- 100
hit.overlap.proximity <- 120
contamination.jaccard.threshold <- 0.7
#######################################################################################
# core.genes.set1 <- c("galF", "gnd", "ugd", "hisI")
# core.genes.set2 <- core.genes.set1[1:3]
this.dir <- getwd()
source(sprintf("%s/functions/general-functions.R", this.dir))
source(sprintf("%s/functions/specialist-functions.R", this.dir))
option_list <- list(
make_option(c("-l", "--locus.name"), default="cps",
help="Which locus to search: cps [default] or kps"),
make_option(c("-e", "--extended.db"), action="store_true", default=FALSE,
help="Use an extended locus search database  [default %default]"),
make_option(c("-D", "--distant.search"), action="store_true", default=FALSE,
help="Search in distant bacteria using blastn instead of megablast [default %default]"),
make_option(c("-p", "--path.file"), default="paths.input.txt",
help="File with path names to all assemblies [default %default]")
)
opt <- parse_args(OptionParser(option_list = option_list))
locus.name <- opt$locus.name
extended.db <- opt$extended.db
search.in.distant.species <- opt$distant.search
genome.paths.filename <- opt$path.file
# locus.name="kps"
# extended.db=TRUE
# search.in.distant.species=FALSE
# genome.paths.filename="assembly-paths.txt"
if(locus.name=="cps"){
database.folder.path <- sprintf("%s/reference-db/cps/0_combined/database", this.dir)
if(extended.db) database.folder.path <- gsub("0_combined", "00_extended", database.folder.path)
core.genes.set1 <- c("galF", "gnd", "ugd", "hisI")
core.genes.set2 <- core.genes.set1[1:3]
if(search.in.distant.species) cds.coverage.threshold <- 90
} else if(locus.name=="kps"){
database.folder.path <- sprintf("%s/reference-db/kps/0_combined/database", this.dir)
if(extended.db) database.folder.path <- gsub("0_combined", "00_extended", database.folder.path)
cds.coverage.threshold <- 70
core.genes.set1 <- c("FEDUCSTM")
core.genes.set1 <- strsplit(core.genes.set1, "")[[1]]
core.genes.set1 <- sprintf("kps%s", core.genes.set1)
core.genes.set2 <- c("DMTECS")
core.genes.set2 <- strsplit(core.genes.set2, "")[[1]]
core.genes.set2 <- sprintf("kps%s", core.genes.set2)
} else{
cat("Wrong locus name! Searching for cps locus.\n")
}
reference.database.filename <- sprintf("%s/references.fa", database.folder.path)
cds.database.filename <- sprintf("%s/genes.fa", database.folder.path)
# load reference database files
get.names.cmd <- sprintf("cat %s | grep '>'", reference.database.filename)
reference.names <- system(get.names.cmd, intern = T)
reference.names <- substr(reference.names, 2, nchar(reference.names))
cds.seq <- read.fasta(cds.database.filename)
cds.seq.n <- names(cds.seq)
cds.seq.n.ref <- sapply(1:length(cds.seq.n), function(k) strsplit(cds.seq.n[k], "__")[[1]][1])
cds.seq.n.gn <- sapply(1:length(cds.seq.n), function(k) strsplit(cds.seq.n[k], "__")[[1]][2])
# ref.jaccard <- read.table(jaccard.dist.filename, header = T, stringsAsFactors = F)
assembly.path.file.exists <- file.exists(genome.paths.filename)
assembly.path.file.empty <- file.size(genome.paths.filename)==0
if(!assembly.path.file.exists | assembly.path.file.empty){
stop("Assembly path file does't exist or is empty! Exiting...\n")
} else{
all.assembly.filesnames <- readLines(genome.paths.filename)
assembly.filesnames.exist <- file.exists(all.assembly.filesnames)
assembly.filesnames.nonempty <- file.size(all.assembly.filesnames)>100
all.assembly.filesnames.exist <- all(assembly.filesnames.exist & assembly.filesnames.nonempty)
if(!any(assembly.filesnames.exist))
stop("None of the assembly files exists! Exiting...\n")
if(!all.assembly.filesnames.exist){
filenames.which.do.not.exist <- all.assembly.filesnames[!assembly.filesnames.exist]
cat("Warning! The following assembly filenames do not exist or are empty:", filenames.which.do.not.exist, sep="\n")
}
}
##################################################
############ Written by Rafal Mostowy ############
################# Version: 0.2.2 #################
######## Date: Tue Jun 26 16:23:10 2018 ##########
##################################################
##################################################
suppressWarnings(suppressPackageStartupMessages(library(seqinr)))
suppressWarnings(suppressPackageStartupMessages(library(igraph)))
suppressWarnings(suppressPackageStartupMessages(library(optparse)))
############################## GLOBAL PARAMETERS #####################################
## -- 1. cds.coverage.threshold --
## to consider a gene present in the assembly, I assume
## a minimum coverage of this gene in the assembly; otherwise ignoring it
## -- 2. klocus.overlap.threshold --
## a gene is considered located outside the K-locus
## if less than 'klocus.overlap.threshold' of its
## length overlaps with the best-match alignment
## -- 3. cds.overlap.threshold --
## a gene is considered "extra and within locus" if
## (a) fulfils the above assumption and
## (b) has less than 'cds.overlap.threshold' overlap
## -- 4. locus.length.comparison.margin --
## when comparing best hit with bm, allow this error
## of margin (quivalent to 'start_end_margin' in Kaptive)
## -- 5. hit.overlap.proximity --
## when comparing locus.regions, merge them if they're close;
## closeness is defined as a maximum distance of 'hit.overlap.proximity'
## (quivalent to 'gap_fill_size' in Kaptive)
## -- 6. contamination.jaccard.threshold --
## when comparing locus.regions, merge them if they're close;
## closeness is defined as a maximum distance of 'hit.overlap.proximity'
## (quivalent to 'gap_fill_size' in Kaptive)
cds.coverage.threshold <- 95
klocus.overlap.threshold <- 0.5
cds.overlap.threshold <- 0.7
locus.length.comparison.margin <- 100
hit.overlap.proximity <- 120
contamination.jaccard.threshold <- 0.7
#######################################################################################
# core.genes.set1 <- c("galF", "gnd", "ugd", "hisI")
# core.genes.set2 <- core.genes.set1[1:3]
this.dir <- getwd()
source(sprintf("%s/functions/general-functions.R", this.dir))
source(sprintf("%s/functions/specialist-functions.R", this.dir))
# setwd("/Users/rmostowy/Dropbox/Projects/HostRange-Mark/test-fK")
option_list <- list(
make_option(c("-l", "--locus.name"), default="cps",
help="Which locus to search: cps [default] or kps"),
make_option(c("-e", "--extended.db"), action="store_true", default=FALSE,
help="Use an extended locus search database  [default %default]"),
make_option(c("-D", "--distant.search"), action="store_true", default=FALSE,
help="Search in distant bacteria using blastn instead of megablast [default %default]"),
make_option(c("-p", "--path.file"), default="paths.input.txt",
help="File with path names to all assemblies [default %default]")
)
opt <- parse_args(OptionParser(option_list = option_list))
opt
make_option
OptionParser
?OptionParser
opt <- parse_args(OptionParser(option_list = option_list, add_help_option = TRUE))
opt
option_list <- list(
make_option(c("-l", "--locus.name"), default="cps",
help="Which locus to search: cps [default] or kps"),
make_option(c("-e", "--extended.db"), action="store_true", default=FALSE,
help="Use an extended locus search database  [default %default]"),
make_option(c("-D", "--distant.search"), action="store_true", default=FALSE,
help="Search in distant bacteria using blastn instead of megablast [default %default]"),
make_option(c("-p", "--path.file"), default="paths.input.txt",
help="File with path names to all assemblies [default %default]"),
make_option(c("-h", "--help"), action="store_true", default=FALSE,
help="Show this help message and exit")
)
opt <- parse_args(OptionParser(option_list = option_list, add_help_option = TRUE))
opt
option_list <- list(
make_option(c("-l", "--locus.name"), default="cps",
help="Which locus to search: cps [default] or kps"),
make_option(c("-e", "--extended.db"), action="store_true", default=FALSE,
help="Use an extended locus search database  [default %default]"),
make_option(c("-D", "--distant.search"), action="store_true", default=FALSE,
help="Search in distant bacteria using blastn instead of megablast [default %default]"),
make_option(c("-p", "--path.file"), default="paths.input.txt",
help="File with path names to all assemblies [default %default]")
)
opt <- parse_args(OptionParser(option_list = option_list, add_help_option = TRUE))
opt
# error handling
locus.test <- any(locus.name %in% c("cps", "kps"))
locus.name <- opt$locus.name
extended.db <- opt$extended.db
search.in.distant.species <- opt$distant.search
genome.paths.filename <- opt$path.file
locus.name
locus.name %in% c("cps", "kps")
# error handling
locus.test <- locus.name %in% c("cps", "kps")
locus.test
genome.paths.filename
paths.test <- file.exists(genome.paths.filename) & file.size(genome.paths.filename)>100
paths.test
sys.frame(1)$ofile
commandArgs(trailingOnly = FALSE)
sys.frame()
sys.frame(1)
sys.frame(2)
sys.frame()
system.getCurrentDirectory()
parent.frame()
parent.frame(2)
parent.frame(1)
sys.frame(-4)
sys.source()
sys.source(".")
sys.source("")
library("furn")
install.packages("furn")
test <- dirname(sys.frame(1)$ofile)
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
other.name <- file.path(script.basename, "other.R")
print(paste("Sourcing",other.name,"from",script.name))
source(other.name)
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
other.name <- file.path(script.basename, "other.R")
print(paste("Sourcing",other.name,"from",script.name))
source(other.name)
other.name
script.basename
initial.options <- commandArgs(trailingOnly = FALSE)
initial.options
file.arg.name <- "--file="
file.arg.name
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.name
dirname
dirname()
initial.options <- commandArgs(trailingOnly = FALSE)
initial.options
?commandArgs
?regex
?grep
this.dir <- thisFile()
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
thisFile
thisFile()
cmdArgs
cmdArgs <- commandArgs(trailingOnly = FALSE)
cmdArgs
cmdArgs <- commandArgs(trailingOnly = FALSE)
thisFile <- function() {
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
length(cmdArgs <- commandArgs(trailingOnly = FALSE))
this.dir <- getwd()
this.dir
this.dir <- sprintf("%s/main.R", getwd())
this.dir
regexpr("/", "this.dir)
regexpr("/", "this.dir")
regexpr("\/", "this.dir")
regexpr("\\/", "this.dir")
this.dir
strsplit(this.dir,"/")[[1]]
gsub
if(length(cmdArgs)==2){
this.dir <- getwd()
} else{
this.dir <- thisFile()
filename <- strsplit(this.dir,"/")[[1]]
filename <- filename[length(filename)]
this.dir <- gsub(sprintf("/%s", filename), "", this.dir)
}
this.dir
option_list <- list(
make_option(c("-l", "--locus.name"), default="cps",
help="Which locus to search: cps [default] or kps"),
make_option(c("-e", "--extended.db"), action="store_true", default=FALSE,
help="Use an extended locus search database  [default %default]"),
make_option(c("-D", "--distant.search"), action="store_true", default=FALSE,
help="Search in distant bacteria using blastn instead of megablast [default %default]"),
make_option(c("-p", "--path.file"), default="paths.input.txt",
help="File with path names to all assemblies [default %default]"),
make_option(c("-o", "--output.folder"), default="extract.output",
help="Name of the output folder [default %default]")
)
opt <- parse_args(OptionParser(option_list = option_list, add_help_option = TRUE))
locus.name <- opt$locus.name
extended.db <- opt$extended.db
search.in.distant.species <- opt$distant.search
genome.paths.filename <- opt$path.file
output.folder.name <- opt$output.folder
##################################################
############ Written by Rafal Mostowy ############
################# Version: 0.2.2 #################
######## Date: Tue Jun 26 16:23:10 2018 ##########
##################################################
##################################################
suppressWarnings(suppressPackageStartupMessages(library(seqinr)))
suppressWarnings(suppressPackageStartupMessages(library(igraph)))
suppressWarnings(suppressPackageStartupMessages(library(optparse)))
cmdArgs <- commandArgs(trailingOnly = FALSE)
thisFile <- function() {
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
############################## GLOBAL PARAMETERS #####################################
## -- 1. cds.coverage.threshold --
## to consider a gene present in the assembly, I assume
## a minimum coverage of this gene in the assembly; otherwise ignoring it
## -- 2. klocus.overlap.threshold --
## a gene is considered located outside the K-locus
## if less than 'klocus.overlap.threshold' of its
## length overlaps with the best-match alignment
## -- 3. cds.overlap.threshold --
## a gene is considered "extra and within locus" if
## (a) fulfils the above assumption and
## (b) has less than 'cds.overlap.threshold' overlap
## -- 4. locus.length.comparison.margin --
## when comparing best hit with bm, allow this error
## of margin (quivalent to 'start_end_margin' in Kaptive)
## -- 5. hit.overlap.proximity --
## when comparing locus.regions, merge them if they're close;
## closeness is defined as a maximum distance of 'hit.overlap.proximity'
## (quivalent to 'gap_fill_size' in Kaptive)
## -- 6. contamination.jaccard.threshold --
## when comparing locus.regions, merge them if they're close;
## closeness is defined as a maximum distance of 'hit.overlap.proximity'
## (quivalent to 'gap_fill_size' in Kaptive)
cds.coverage.threshold <- 95
klocus.overlap.threshold <- 0.5
cds.overlap.threshold <- 0.7
locus.length.comparison.margin <- 100
hit.overlap.proximity <- 120
contamination.jaccard.threshold <- 0.7
#######################################################################################
# core.genes.set1 <- c("galF", "gnd", "ugd", "hisI")
# core.genes.set2 <- core.genes.set1[1:3]
if(length(cmdArgs)==2){
this.dir <- getwd()
} else{
this.dir <- thisFile()
filename <- strsplit(this.dir,"/")[[1]]
filename <- filename[length(filename)]
this.dir <- gsub(sprintf("/%s", filename), "", this.dir)
}
source(sprintf("%s/functions/general-functions.R", this.dir))
source(sprintf("%s/functions/specialist-functions.R", this.dir))
# setwd("/Users/rmostowy/Dropbox/Projects/CpsEvolution/CapsuleEntero/data/2_getGenera/genus15_Klebsiella/zz_test")
option_list <- list(
make_option(c("-l", "--locus.name"), default="cps",
help="Which locus to search: cps [default] or kps"),
make_option(c("-e", "--extended.db"), action="store_true", default=FALSE,
help="Use an extended locus search database  [default %default]"),
make_option(c("-D", "--distant.search"), action="store_true", default=FALSE,
help="Search in distant bacteria using blastn instead of megablast [default %default]"),
make_option(c("-p", "--path.file"), default="paths.input.txt",
help="File with path names to all assemblies [default %default]"),
make_option(c("-o", "--output.folder"), default="extract.output",
help="Name of the output folder [default %default]")
)
opt <- parse_args(OptionParser(option_list = option_list, add_help_option = TRUE))
locus.name <- opt$locus.name
extended.db <- opt$extended.db
search.in.distant.species <- opt$distant.search
genome.paths.filename <- opt$path.file
output.folder.name <- opt$output.folder
output.folder.name
